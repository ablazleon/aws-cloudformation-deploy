Description: >
  Server, security, and load-balance are configured.
Parameters:
  ProjectName:
    Description: Project name prefixed to resource names.
    Type: String

  WebAppServersMinSize:
    Description: Minimum number of web application servers
    Type: String
    Default: '2'

  WebAppServersMaxSize:
    Description: Maximum number of web application servers
    Type: String
    Default: '4'

  WebAppServersDesiredCapacity:
    Description: Desired initial number of web application servers
    Type: String
    Default: '4'

  S3CodeRepo:
    Description: Full S3 path and file name of zipped file
    Type: String
    Default: 's3://udacity-demo-1/udacity.zip'

  KeyPairName:
    Description: Name of key-pair (PEM) file.
    Type: String
    Default: 'env'


Resources:
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          # aws s3 cp s3://udacity-demo-1/udacity.zip .
          # unzip -o udacity.zip
          # I cannot access to this s3 bucket
          echo '<h1> it works! Udagram, Udacity </h1> <p> <h2> Author: Adrian </h2> </p>' > index.html
          systemctl start apache2.service
      ImageId: ami-003634241a8fcdec0
      IamInstanceProfile: !Ref ListBucketInstanceProfile
      InstanceType: t3.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: 10

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${ProjectName}-VPCID"

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub "${ProjectName}-PRIV-NETS"
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      DesiredCapacity: !Ref WebAppServersDesiredCapacity
      MinSize: !Ref WebAppServersMinSize
      MaxSize: !Ref WebAppServersMaxSize
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
      TargetGroupARNs:
      - Ref: "WebAppTargetGroup"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${ProjectName}-PUB-SN-1"
      - Fn::ImportValue: !Sub "${ProjectName}-PUB-SN-2"

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: "forward"
        TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: "forward"
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: "path-pattern"
        Values: ["/"]
      ListenerArn: !Ref Listener
      Priority: 1

  BastionPublicSubnet1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-06f2f779464715dc5
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SubnetId:
        Fn::ImportValue:
          Fn::Sub: "${ProjectName}-PUB-SN-1"
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName} Bastion Host 1

  BastionPublicSubnet2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-06f2f779464715dc5
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SubnetId:
        Fn::ImportValue:
          Fn::Sub: "${ProjectName}-PUB-SN-2"
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName} Bastion Host 2

  ListBucketInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: S3BucketRole

  S3BucketRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  S3BucketsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3BucketsPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:List*
          Resource: "*"
      Roles:
      - Ref: S3BucketRole


Outputs:
  LoadBalancerDNSName:
    Description: DNS Name of the web application
    Value: !Join [ "", [ "http://", !GetAtt LoadBalancer.DNSName ] ]
    Export:
      Name: !Sub "${ProjectName}-DNS-NAME"

  BastionHostIPPublicSubnet1:
    Description: IP address of bastion host in public subnet 1
    Value: !GetAtt BastionPublicSubnet1.PublicIp
    Export:
      Name: !Sub "${ProjectName}-BASTION-HOST-IP-PUB-SN-1"

  BastionHostIPPublicSubnet2:
    Description: IP address of bastion host in public subnet 2
    Value: !GetAtt BastionPublicSubnet2.PublicIp
    Export:
      Name: !Sub "${ProjectName}-BASTION-HOST-IP-PUB-SN-2"

  BastionHostDNSPublicSubnet1:
    Description: DNS address of bastion host in public subnet 1
    Value: !GetAtt BastionPublicSubnet1.PublicDnsName
    Export:
      Name: !Sub "${ProjectName}-BASTION-HOST-DNS-PUB-SN-1"

  BastionHostDNSPublicSubnet2:
    Description: DNS address of bastion host in public subnet 2
    Value: !GetAtt BastionPublicSubnet2.PublicDnsName
    Export:
      Name: !Sub "${ProjectName}-BASTION-HOST-DNS-PUB-SN-2"
